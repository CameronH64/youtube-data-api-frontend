# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'frontend.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap, QImage         # Needed for images.
from PyQt5.QtWidgets import QLabel
from dotenv import load_dotenv
import os
import yt_dlp
from googleapiclient.discovery import build
import pprint
import requests

class Ui_MainWindow(object):

    def __init__(self):
        self.likeCountPopularTextEdit = None
        self.likeCountLabel = None
        self.youtube_service = None
        self.downloadButton = None
        self.thumbnailArtImageLabel = None
        self.profileArtImageLabel = None
        self.menubar = None
        self.descriptionPlainTextEdit = None
        self.descriptionLabel = None
        self.channelLabel = None
        self.thumbnailArtLabel = None
        self.viewCountLabel = None
        self.viewCountPopularTextEdit = None
        self.videoTitle = None
        self.videoTitleLabel = None
        self.popularRecentVideoLabel = None
        self.subscribersLabel = None
        self.subscribersTextEdit = None
        self.locationLabel = None
        self.locationTextEdit = None
        self.statisticsViewCountLabel = None
        self.viewCountTextEdit = None
        self.videoCountTextEdit = None
        self.videoCountLabel = None
        self.statisticsLabel = None
        self.profileArtLabel = None
        self.bannerArtLabel = None
        self.statusbar = None
        self.searchBar = None
        self.firstLine = None
        self.secondLine = None
        self.enterChannelMessage = None
        self.submitButton = None
        self.centralwidget = None

        self.popularVideoURL = None

    def setup_ui(self, MainWindow):

        load_dotenv()
        api_key = os.getenv("API_KEY")

        # Build the YouTube service object.
        self.youtube_service = build('youtube', 'v3', developerKey=api_key)     # Assigning self so that this object can be used in and instance of this class.

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(443, 789)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # ======================== Set Images ========================

        self.profileArtImageLabel = QtWidgets.QLabel(self.centralwidget)
        self.profileArtImageLabel.setGeometry(QtCore.QRect(162, 100, 111, 111))
        self.profileArtImageLabel.setText("")
        self.profileArtImageLabel.setScaledContents(True)
        self.profileArtImageLabel.setObjectName("Profile Image")

        self.profileArtLabel = QtWidgets.QLabel(self.centralwidget)
        self.profileArtLabel.setGeometry(QtCore.QRect(162, 80, 111, 16))
        self.profileArtLabel.setObjectName("profileArtLabel")

        self.thumbnailArtImageLabel = QtWidgets.QLabel(self.centralwidget)
        self.thumbnailArtImageLabel.setGeometry(QtCore.QRect(120, 590, 200, 113))
        self.thumbnailArtImageLabel.setText("")
        self.thumbnailArtImageLabel.setScaledContents(True)
        self.thumbnailArtImageLabel.setObjectName("Thumbnail Image")

        # ======================== / Set Images ========================

        # ======================== Set Buttons ========================

        self.submitButton = QtWidgets.QPushButton(self.centralwidget)
        self.submitButton.setGeometry(QtCore.QRect(330, 40, 71, 21))
        self.submitButton.setObjectName("submitButton")
        self.submitButton.clicked.connect(self.submit_clicked)          # Connect the button to the method.

        self.downloadButton = QtWidgets.QPushButton(self.centralwidget)
        self.downloadButton.setGeometry(QtCore.QRect(120, 710, 200, 21))
        self.downloadButton.setObjectName("downloadButton")
        self.downloadButton.clicked.connect(self.download_clicked)          # Connect the button to the method.

        # ======================== / Set Buttons ========================

        self.enterChannelMessage = QtWidgets.QLabel(self.centralwidget)
        self.enterChannelMessage.setGeometry(QtCore.QRect(20, 10, 161, 16))

        font = QtGui.QFont()
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)

        self.enterChannelMessage.setFont(font)
        self.enterChannelMessage.setObjectName("enterChannelMessage")

        self.secondLine = QtWidgets.QFrame(self.centralwidget)
        self.secondLine.setGeometry(QtCore.QRect(0, 480, 511, 21))
        self.secondLine.setFrameShape(QtWidgets.QFrame.HLine)
        self.secondLine.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.secondLine.setObjectName("secondLine")

        self.firstLine = QtWidgets.QFrame(self.centralwidget)
        self.firstLine.setGeometry(QtCore.QRect(0, 220, 591, 21))
        self.firstLine.setFrameShape(QtWidgets.QFrame.HLine)
        self.firstLine.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.firstLine.setObjectName("firstLine")

        self.searchBar = QtWidgets.QLineEdit(self.centralwidget)
        self.searchBar.setGeometry(QtCore.QRect(50, 40, 261, 20))
        self.searchBar.setText("")
        self.searchBar.setReadOnly(False)
        self.searchBar.setClearButtonEnabled(False)
        self.searchBar.setObjectName("searchBar")

        self.statisticsLabel = QtWidgets.QLabel(self.centralwidget)
        self.statisticsLabel.setGeometry(QtCore.QRect(20, 240, 161, 16))

        font = QtGui.QFont()
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)

        self.statisticsLabel.setFont(font)
        self.statisticsLabel.setObjectName("statisticsLabel")

        self.videoCountLabel = QtWidgets.QLabel(self.centralwidget)
        self.videoCountLabel.setGeometry(QtCore.QRect(20, 270, 81, 16))
        self.videoCountLabel.setObjectName("joinedLabel")

        self.videoCountTextEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.videoCountTextEdit.setGeometry(QtCore.QRect(100, 270, 91, 20))
        self.videoCountTextEdit.setText("")
        self.videoCountTextEdit.setReadOnly(True)
        self.videoCountTextEdit.setClearButtonEnabled(False)
        self.videoCountTextEdit.setObjectName("joinedTextEdit")

        self.viewCountTextEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.viewCountTextEdit.setGeometry(QtCore.QRect(100, 310, 91, 20))
        self.viewCountTextEdit.setText("")
        self.viewCountTextEdit.setReadOnly(True)
        self.viewCountTextEdit.setClearButtonEnabled(False)
        self.viewCountTextEdit.setObjectName("viewCountTextEdit")

        self.statisticsViewCountLabel = QtWidgets.QLabel(self.centralwidget)
        self.statisticsViewCountLabel.setGeometry(QtCore.QRect(20, 310, 81, 16))
        self.statisticsViewCountLabel.setObjectName("statisticsViewCountLabel")

        self.locationTextEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.locationTextEdit.setGeometry(QtCore.QRect(290, 310, 111, 20))
        self.locationTextEdit.setText("")
        self.locationTextEdit.setReadOnly(True)
        self.locationTextEdit.setClearButtonEnabled(False)
        self.locationTextEdit.setObjectName("locationTextEdit")

        self.locationLabel = QtWidgets.QLabel(self.centralwidget)
        self.locationLabel.setGeometry(QtCore.QRect(200, 310, 81, 20))
        self.locationLabel.setObjectName("locationLabel")

        self.subscribersTextEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.subscribersTextEdit.setGeometry(QtCore.QRect(290, 270, 111, 20))
        self.subscribersTextEdit.setText("")
        self.subscribersTextEdit.setReadOnly(True)
        self.subscribersTextEdit.setClearButtonEnabled(False)
        self.subscribersTextEdit.setObjectName("subscribersTextEdit")

        self.subscribersLabel = QtWidgets.QLabel(self.centralwidget)
        self.subscribersLabel.setGeometry(QtCore.QRect(200, 270, 81, 20))
        self.subscribersLabel.setObjectName("subscribersLabel")

        self.popularRecentVideoLabel = QtWidgets.QLabel(self.centralwidget)
        self.popularRecentVideoLabel.setGeometry(QtCore.QRect(20, 500, 161, 16))

        font = QtGui.QFont()
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)

        self.popularRecentVideoLabel.setFont(font)
        self.popularRecentVideoLabel.setObjectName("popularRecentVideoLabel")

        self.videoTitleLabel = QtWidgets.QLineEdit(self.centralwidget)
        self.videoTitleLabel.setGeometry(QtCore.QRect(100, 530, 301, 20))
        self.videoTitleLabel.setText("")
        self.videoTitleLabel.setReadOnly(True)
        self.videoTitleLabel.setClearButtonEnabled(False)
        self.videoTitleLabel.setObjectName("videoTitleLabel")
        self.videoTitle = QtWidgets.QLabel(self.centralwidget)
        self.videoTitle.setGeometry(QtCore.QRect(20, 530, 81, 16))
        self.videoTitle.setObjectName("videoTitle")

        self.viewCountPopularTextEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.viewCountPopularTextEdit.setGeometry(QtCore.QRect(100, 560, 111, 20))
        self.viewCountPopularTextEdit.setText("")
        self.viewCountPopularTextEdit.setReadOnly(True)
        self.viewCountPopularTextEdit.setClearButtonEnabled(False)
        self.viewCountPopularTextEdit.setObjectName("viewCountPopularTextEdit")



        self.likeCountPopularTextEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.likeCountPopularTextEdit.setGeometry(QtCore.QRect(300, 560, 101, 20))
        self.likeCountPopularTextEdit.setText("")
        self.likeCountPopularTextEdit.setReadOnly(True)
        self.likeCountPopularTextEdit.setClearButtonEnabled(False)
        self.likeCountPopularTextEdit.setObjectName("likeCountPopularTextEdit")


        self.viewCountLabel = QtWidgets.QLabel(self.centralwidget)
        self.viewCountLabel.setGeometry(QtCore.QRect(20, 560, 81, 16))
        self.viewCountLabel.setObjectName("viewCountLabel")


        self.likeCountLabel = QtWidgets.QLabel(self.centralwidget)
        self.likeCountLabel.setGeometry(QtCore.QRect(225, 560, 81, 16))
        self.likeCountLabel.setObjectName("likeCountLabel")


        self.thumbnailArtLabel = QtWidgets.QLabel(self.centralwidget)
        self.thumbnailArtLabel.setGeometry(QtCore.QRect(20, 600, 81, 16))
        self.thumbnailArtLabel.setObjectName("thumbnailArtLabel")

        self.channelLabel = QtWidgets.QLabel(self.centralwidget)
        self.channelLabel.setGeometry(QtCore.QRect(20, 350, 51, 16))
        self.channelLabel.setObjectName("channelLabel")

        self.descriptionLabel = QtWidgets.QLabel(self.centralwidget)
        self.descriptionLabel.setGeometry(QtCore.QRect(20, 370, 71, 16))
        self.descriptionLabel.setObjectName("descriptionLabel")

        self.descriptionPlainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.descriptionPlainTextEdit.setGeometry(QtCore.QRect(100, 350, 301, 121))
        self.descriptionPlainTextEdit.setReadOnly(True)
        self.descriptionPlainTextEdit.setPlainText("")

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 443, 21))
        self.menubar.setObjectName("menubar")

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")

        self.descriptionPlainTextEdit.setObjectName("plainTextEdit")

        MainWindow.setCentralWidget(self.centralwidget)
        MainWindow.setMenuBar(self.menubar)
        MainWindow.setStatusBar(self.statusbar)

        self.retranslate_ui(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslate_ui(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "YouTube Data API Frontend"))
        self.submitButton.setText(_translate("MainWindow", "Submit"))
        self.downloadButton.setText(_translate("MainWindow", "Download Audio"))
        self.enterChannelMessage.setText(_translate("MainWindow", "Enter a YouTube Channel:"))
        self.profileArtLabel.setText(_translate("MainWindow", "Profile Art:"))
        self.statisticsLabel.setText(_translate("MainWindow", "Statistics:"))
        self.videoCountLabel.setText(_translate("MainWindow", "Video Count:"))
        self.statisticsViewCountLabel.setText(_translate("MainWindow", "View Count:"))
        self.locationLabel.setText(_translate("MainWindow", "Location:"))
        self.subscribersLabel.setText(_translate("MainWindow", "Subscribers:"))
        self.popularRecentVideoLabel.setText(_translate("MainWindow", "Most Popular Recent Video:"))
        self.videoTitle.setText(_translate("MainWindow", "Video Title:"))
        self.viewCountLabel.setText(_translate("MainWindow", "View Count:"))
        self.thumbnailArtLabel.setText(_translate("MainWindow", "Thumbnail Art:"))
        self.channelLabel.setText(_translate("MainWindow", "Channel"))
        self.descriptionLabel.setText(_translate("MainWindow", "Description:"))
        self.likeCountLabel.setText(_translate("MainWindow", "Like Count:"))

    # ================================================================
    # ===================== Button Functionality =====================
    # ================================================================

    def submit_clicked(self):

        self.set_gui_statistics()
        print("\n")

        self.set_most_popular_recent_video()
        print("\n")

    def set_gui_statistics(self):

        # Get the YouTube channel information
        request = self.youtube_service.channels().list(
            part='snippet,contentDetails,statistics',
            id=self.searchBar.text()
        )
        channel_information = request.execute()

        pprint.pprint(channel_information)  # Debugging

        print("\n")

        # ====================== SET GUI STATISTICS ======================

        # video count
        video_count = channel_information['items'][0]['statistics']['videoCount']
        self.videoCountTextEdit.setText(video_count)

        # view count
        view_count = channel_information['items'][0]['statistics']['viewCount']
        self.viewCountTextEdit.setText(view_count)

        # subscribers
        subscriber_count = channel_information['items'][0]['statistics']['subscriberCount']
        self.subscribersTextEdit.setText(subscriber_count)

        # location
        try:
            location = channel_information['items'][0]['snippet']['country']
            self.locationTextEdit.setText(location)
        except Exception:
            self.locationTextEdit.setText("N/A")

        # description
        description = channel_information['items'][0]['snippet']['description']
        self.descriptionPlainTextEdit.setPlainText(description)

        # channel profile picture
        profile_picture = channel_information['items'][0]['snippet']['thumbnails']['medium']['url']
        image = QImage()
        image.loadFromData(requests.get(profile_picture).content)
        self.profileArtImageLabel.setPixmap(QPixmap(image))


        # ====================== / SET GUI STATISTICS ======================

    def set_most_popular_recent_video(self):

        max_return = 10

        # ========================= GET CHANNEL UPLOAD ID =========================
        # Get the YouTube channel information
        request = self.youtube_service.channels().list(
            part='contentDetails',
            id=self.searchBar.text()
        )
        channel_information = request.execute()
        upload_id = channel_information['items'][0]['contentDetails']['relatedPlaylists']['uploads']

        # print("Upload ID: ", end='')
        # pprint.pprint(upload_id)  # Debugging

        # ========================= / GET CHANNEL UPLOAD ID =========================

        # ========================= GET MOST RECENT VIDEO IDS =========================

        channel_videos = []

        # Get the most recent videos from the channel.
        request = self.youtube_service.playlistItems().list(
            part="contentDetails",
            maxResults=max_return,
            playlistId=upload_id
        )
        videos_response = request.execute()

        # print('Videos response: ')
        # pprint.pprint(videos_response)
        # print('\n')

        # Cycle through all videos to generate a list of video ids.

        for x in range(0, max_return):
            channel_videos.append(videos_response['items'][x]['contentDetails']['videoId'])

        # print('Channel videos: ', end='')
        # print(channel_videos)       # Debugging
        # print('\n')

        # ========================= / GET MOST RECENT VIDEO IDS =========================

        # ================= CYCLE THROUGH AND FIND MOST POPULAR VIDEO =================

        highest_view_count = 0
        highest_like_count = 0
        highest_thumbnail_url = ''
        highest_video_title = ''
        # highest_video_url = ''

        # Cycle through each returned video, and find the most popular one.
        # for video in channel_videos:
        for video in channel_videos:


            single_video_request = self.youtube_service.videos().list(
                part="snippet,statistics",
                id=video
            )
            single_video_response = single_video_request.execute()

            pprint.pprint(single_video_response)

            single_video_view_count = int(single_video_response['items'][0]['statistics']['viewCount'])

            # Assign most popular video information here.
            if single_video_view_count > highest_view_count:
                highest_view_count = single_video_view_count
                highest_like_count = int(single_video_response['items'][0]['statistics']['likeCount'])
                highest_thumbnail_url = single_video_response['items'][0]['snippet']['thumbnails']['medium']['url']
                highest_video_title = single_video_response['items'][0]['snippet']['localized']['title']
                self.popularVideoURL = 'https://www.youtube.com/watch?v=' + single_video_response['items'][0]['id']

        # print(highest_view_count)           # All debugging
        # print(highest_like_count)
        # print(highest_thumbnail_url)
        # print(highest_video_title)
        # print(highest_video_url)


        # ================= / CYCLE THROUGH AND FIND MOST POPULAR VIDEO =================

        # ====================== SET POPULAR STATISTICS ======================

        # Set popular video title
        self.videoTitleLabel.setText(highest_video_title)

        # Set popular view count
        self.viewCountPopularTextEdit.setText(str(highest_view_count))

        # Set popular like count
        self.likeCountPopularTextEdit.setText(str(highest_like_count))

        # Set popular video thumbnail
        image_thumbnail = QImage()
        image_thumbnail.loadFromData(requests.get(highest_thumbnail_url).content)
        self.thumbnailArtImageLabel.setPixmap(QPixmap(image_thumbnail))

        # ====================== / SET POPULAR STATISTICS ======================



    def download_clicked(self):

        options = {
            'format': 'm4a/bestaudio/best',
            # See help(yt_dlp.postprocessor) for a list of available Postprocessors and their arguments
            'postprocessors': [{  # Extract audio using ffmpeg
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'm4a',
            }]
        }

        with yt_dlp.YoutubeDL(options) as ydl:
            error_code = ydl.download(self.popularVideoURL)

# ================================================================
# ===================== / Button Functionality ===================
# ================================================================

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()

    ui = Ui_MainWindow()
    ui.setup_ui(MainWindow)

    MainWindow.show()
    sys.exit(app.exec_())
